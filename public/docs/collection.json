{
    "variable": [
        {
            "id": "baseUrl",
            "key": "baseUrl",
            "type": "string",
            "name": "string",
            "value": "http:\/\/localhost"
        }
    ],
    "info": {
        "name": "BABEL v1",
        "_postman_id": "06003027-7fb6-49aa-a397-a287b59178fe",
        "description": "",
        "schema": "https:\/\/schema.getpostman.com\/json\/collection\/v2.1.0\/collection.json"
    },
    "item": [
        {
            "name": "FTTH Controller",
            "description": "\nAPI for managing FTTH connections.",
            "item": [
                {
                    "name": "Get Customer Connection",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "v1\/ftth\/customer",
                            "query": [],
                            "raw": "{{baseUrl}}\/v1\/ftth\/customer"
                        },
                        "method": "GET",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"username\":\"10.132.139.232\",\"onu_sn\":\"HWTC31E0CJSD\"}"
                        },
                        "description": "This endpoint allows you to get the customer connection params from Radius and status from SmartOLT."
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\"status\":true,\"message\":\"Customer connection found in Radius and ONU is available in SmartOLT.\",\"data\":{\"radius\":{\"status\":\"success\",\"message\":\"User found\",\"detail\":{\"id\":29881,\"name\":\"Gustavo   Ivan   Escalon CastroESCALON CASTRO\",\"username\":\"10.112.239.132\",\"password\":\"password\",\"bandwith_plan\":\"61440k\/61440k\",\"main_ip\":\"10.192.310.114\",\"node\":\"CASTROL FTTH\",\"created_at\":\"0000-00-00\",\"updated_at\":\"2023-06-08\"}},\"smartolt\":{\"status\":\"success\",\"message\":\"ONU Status retrieved successfully\",\"detail\":{\"status\":true,\"onu_status\":\"Online\"}}}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 206,
                            "body": "{\"status\":\"success\",\"message\":\"Error getting ONU status, but customer connection was found in Radius.\",\"data\":{\"radius\":{\"status\":\"success\",\"message\":\"User found\",\"detail\":{\"id\":29881,\"name\":\"Gustavo   Ivan   Escalon CastroESCALON CASTRO\",\"username\":\"10.112.239.232\",\"password\":\"b3afs82\",\"bandwith_plan\":\"61440k\/61440k\",\"main_ip\":\"10.192.510.114\",\"node\":\"CASTROL FTTH\",\"created_at\":\"0000-00-00\",\"updated_at\":\"2023-06-08\"}}}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 400,
                            "body": "{\"status\":\"error\",\"message\":\"Invalid data.\",\"detail\":{\"username\":[\"The username field is required.\"],\"onu_sn\":[\"The onu sn field is required.\"]}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 404,
                            "body": "{\"status\":\"error\",\"message\":\"Error getting customer connection. Customer not found in Radius.\",\"data\":{\"radius\":{\"status\":\"error\",\"message\":\"User does not exist.\"}}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\"status\": \"error\", \"message\": \"Error getting customer connection.\"}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Update Customer Connection",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "v1\/ftth\/customer",
                            "query": [],
                            "raw": "{{baseUrl}}\/v1\/ftth\/customer"
                        },
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"name\":\"Kwargs\",\"username\":\"1.1.1.1\",\"bandwith_plan\":\"61440k\\\/61440k\",\"node\":\"CASTROL FTTH\",\"main_ip\":\"10.192.310.11\",\"onu_sn\":\"HWTC31E0CJSF\"}"
                        },
                        "description": "This endpoint allows you to update the customer connection params in Radius and reboot the ONU via SmartOLT."
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\"status\": true, \"message\": \"Customer connection updated in Radius and ONU rebooted in SmartOLT.\", \"data\": {\"radius\": {\"status\": \"success\", \"message\": \"Bandwidth updated successfully\", \"detail\": {\"status\": \"success\", \"message\": \"User found\", \"detail\": {\"id\": 29881, \"name\": \"Kwargs\", \"username\": \"10.112.239.232\", \"password\": \"b3a7fw82\", \"bandwith_plan\": \"61440k\/61440k\", \"main_ip\": \"10.192.210.114\", \"node\": \"CASTROL FTTH\", \"created_at\": \"0000-00-00\", \"updated_at\": \"2023-06-08\"}}}, \"smartolt\": {\"status\": \"success\", \"message\": \"ONU Status rebooted successfully\", \"detail\": {\"status\": true, \"response\": \"Device reboot command sent\"}}}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 206,
                            "body": "{\"status\": \"success\", \"message\": \"Customer connection updated in Radius, but ONU is not available in SmartOLT.\", \"data\": {\"radius\": {\"status\": \"success\", \"message\": \"User found\", \"detail\": {\"id\": 29881, \"name\": \"Kwargs\", \"username\": \"10.112.239.232\", \"password\": \"b3afswe82\", \"bandwith_plan\": \"61440k\/61440k\", \"main_ip\": \"10.192.510.114\", \"node\": \"CASTROL FTTH\", \"created_at\": \"0000-00-00\", \"updated_at\": \"2023-06-08\"}}}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 422,
                            "body": "{\"status\": \"error\", \"message\": \"Error updating customer connection.\", \"data\": {\"radius\": {\"status\": \"error\", \"message\": \"User does not exist.\"}}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\"status\": \"error\", \"message\": \"Error getting customer connection.\"}",
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "Mikrotik Controller",
            "description": "API for managing Mikrotik",
            "item": [
                {
                    "name": "Wireless",
                    "description": "To manage queues connections",
                    "item": [
                        {
                            "name": "Test RouterOS",
                            "request": {
                                "url": {
                                    "host": "{{baseUrl}}",
                                    "path": "v1\/test",
                                    "query": [],
                                    "raw": "{{baseUrl}}\/v1\/test"
                                },
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application\/xml"
                                    },
                                    {
                                        "key": "Accept",
                                        "value": "application\/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\"ip\":\"192.168.1.1\"}"
                                },
                                "description": "This endpoint allows you to test the Mikrotik server connection with this API.\nIt's a really useful endpoint and a start point to know if there is any problem.\n<aside class=\"notice\">I recommend you to use first, to debug any futher inconvenience. \ud83d\ude01<\/aside>",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "header": [],
                                    "code": 200,
                                    "body": "{\"name\" : \"Mikrotik-Cristian\"}",
                                    "name": "success"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Unable to establish socket session, No route to host\"}",
                                    "name": "no route to host"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Undefined array key 'ip'\"}",
                                    "name": "no payload or body params"
                                }
                            ]
                        },
                        {
                            "name": "Get Contracts",
                            "request": {
                                "url": {
                                    "host": "{{baseUrl}}",
                                    "path": "v1\/contracts",
                                    "query": [],
                                    "raw": "{{baseUrl}}\/v1\/contracts"
                                },
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application\/xml"
                                    },
                                    {
                                        "key": "Accept",
                                        "value": "application\/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\"ip\":\"192.168.1.1\"}"
                                },
                                "description": "This endpoint allows you to get contracts information from a Mikrotik server.\n<aside class=\"notice\">This will be useful to get the clients that are in an specific router. <\/aside>",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "header": [],
                                    "code": 200,
                                    "body": "{\"ip_server\": \"192.168.2.184\", \"clientes_activos\": 1, \"clientes_details\": [{\"cliente_ip\": \"1.1.1.1\",\"download\": \"102400 Kbps\", \"upload\": \"3072 Kbps\", \"estado\": \"activo\"}]}",
                                    "name": "success"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Unable to establish socket session, No route to host\"}",
                                    "name": "no route to host"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Undefined array key 'ip'\"}",
                                    "name": "no payload or body params"
                                }
                            ]
                        },
                        {
                            "name": "Create Contracts",
                            "request": {
                                "url": {
                                    "host": "{{baseUrl}}",
                                    "path": "v1\/contracts",
                                    "query": [],
                                    "raw": "{{baseUrl}}\/v1\/contracts"
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application\/xml"
                                    },
                                    {
                                        "key": "Accept",
                                        "value": "application\/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\"ip\":\"192.168.1.1\",\"clientes\":{\"cliente_ip\":\"1.1.1.1\",\"download\":\"102400 Kbps\",\"upload\":\"3072 Kbps\",\"estado\":\"activo\"}}"
                                },
                                "description": "This endpoint allows you to create a 'contract or contracts' in a Mikrotik server.\n<aside class=\"notice\">With this you are able to create \"contracts\" (queues with address-list). <\/aside>",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "header": [],
                                    "code": 200,
                                    "body": "{\"message\": \"BABEL : \u00a1Cola\/s creada\/s con \u00e9xito!\"}",
                                    "name": "success"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Unable to establish socket session, No route to host\"}",
                                    "name": "no route to host"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Undefined array key 'ip'\"}",
                                    "name": "no payload or missing params"
                                }
                            ]
                        },
                        {
                            "name": "Update Contracts",
                            "request": {
                                "url": {
                                    "host": "{{baseUrl}}",
                                    "path": "v1\/contracts",
                                    "query": [],
                                    "raw": "{{baseUrl}}\/v1\/contracts"
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application\/xml"
                                    },
                                    {
                                        "key": "Accept",
                                        "value": "application\/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\"ip\":\"192.168.1.1\",\"clientes\":{\"cliente_ip\":\"1.1.1.1\",\"download\":\"102400 Kbps\",\"upload\":\"3072 Kbps\",\"estado\":\"activo\"}}"
                                },
                                "description": "This endpoint allows you to update the banwidth profile of a 'contract or contracts' or ip in a Mikrotik server.\n<aside class=\"notice\">With this you are able to update the \"contracts\" (queues with address-list). <\/aside>",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "header": [],
                                    "code": 200,
                                    "body": "{\"message\": \"BABEL : \u00a1Cola\/s actualizada\/s con \u00e9xito!\"}",
                                    "name": "success"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Unable to establish socket session, No route to host\"}",
                                    "name": "no route to host"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Undefined array key 'ip'\"}",
                                    "name": "no payload or missing params"
                                }
                            ]
                        },
                        {
                            "name": "Delete Contracts",
                            "request": {
                                "url": {
                                    "host": "{{baseUrl}}",
                                    "path": "v1\/contracts",
                                    "query": [],
                                    "raw": "{{baseUrl}}\/v1\/contracts"
                                },
                                "method": "DELETE",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application\/xml"
                                    },
                                    {
                                        "key": "Accept",
                                        "value": "application\/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\"ip\":\"192.168.1.1\",\"clientes\":{\"cliente_ip\":\"1.1.1.1\",\"download\":\"102400 Kbps\",\"upload\":\"3072 Kbps\",\"estado\":\"activo\"}}"
                                },
                                "description": "This endpoint allows you to delete a 'contract or contracts' in a Mikrotik server.\n<aside class=\"notice\">With this you are able to delete the \"contracts\" (queues with address-list). BE CAREFUL \ud83d\udc40 . <\/aside>",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "header": [],
                                    "code": 200,
                                    "body": "{\"message\": \"BABEL : \u00a1Cola\/s eliminada\/s con \u00e9xito!\"}",
                                    "name": "success"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Unable to establish socket session, No route to host\"}",
                                    "name": "no route to host"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Undefined array key 'ip'\"}",
                                    "name": "no payload or missing params"
                                }
                            ]
                        },
                        {
                            "name": "Create Contracts",
                            "request": {
                                "url": {
                                    "host": "{{baseUrl}}",
                                    "path": "v1.1\/contracts",
                                    "query": [],
                                    "raw": "{{baseUrl}}\/v1.1\/contracts"
                                },
                                "method": "POST",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application\/xml"
                                    },
                                    {
                                        "key": "Accept",
                                        "value": "application\/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\"ip\":\"192.168.1.1\",\"clientes\":{\"cliente_ip\":\"1.1.1.1\",\"download\":\"102400 Kbps\",\"upload\":\"3072 Kbps\",\"estado\":\"activo\"}}"
                                },
                                "description": "This endpoint allows you to create a 'contract or contracts' in a Mikrotik server.\n<aside class=\"notice\">With this you are able to create \"contracts\" (queues with address-list). <\/aside>",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "header": [],
                                    "code": 200,
                                    "body": "{\"message\": \"BABEL : \u00a1Cola\/s creada\/s con \u00e9xito!\"}",
                                    "name": "success"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Unable to establish socket session, No route to host\"}",
                                    "name": "no route to host"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Undefined array key 'ip'\"}",
                                    "name": "no payload or missing params"
                                }
                            ]
                        },
                        {
                            "name": "Update Contracts",
                            "request": {
                                "url": {
                                    "host": "{{baseUrl}}",
                                    "path": "v1.1\/contracts",
                                    "query": [],
                                    "raw": "{{baseUrl}}\/v1.1\/contracts"
                                },
                                "method": "PUT",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application\/xml"
                                    },
                                    {
                                        "key": "Accept",
                                        "value": "application\/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\"ip\":\"192.168.1.1\",\"clientes\":{\"cliente_ip\":\"1.1.1.1\",\"download\":\"102400 Kbps\",\"upload\":\"3072 Kbps\",\"estado\":\"activo\"}}"
                                },
                                "description": "This endpoint allows you to update the banwidth profile of a 'contract or contracts' or ip in a Mikrotik server.\n<aside class=\"notice\">With this you are able to update the \"contracts\" (queues with address-list). <\/aside>",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "header": [],
                                    "code": 200,
                                    "body": "{\"message\": \"BABEL : \u00a1Cola\/s actualizada\/s con \u00e9xito!\"}",
                                    "name": "success"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Unable to establish socket session, No route to host\"}",
                                    "name": "no route to host"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Undefined array key 'ip'\"}",
                                    "name": "no payload or missing params"
                                }
                            ]
                        },
                        {
                            "name": "Enable Connections",
                            "request": {
                                "url": {
                                    "host": "{{baseUrl}}",
                                    "path": "v1\/connection\/enableConnection",
                                    "query": [],
                                    "raw": "{{baseUrl}}\/v1\/connection\/enableConnection"
                                },
                                "method": "PATCH",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application\/xml"
                                    },
                                    {
                                        "key": "Accept",
                                        "value": "application\/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\"ip\":\"192.168.1.1\",\"clientes\":{\"cliente_ip\":\"1.1.1.1\"}}"
                                },
                                "description": "This endpoint gets the ip\/s in the address-list \"clientes_cortados\", then it puts it\/them back in \"clientes_activos\" address-list\n<aside class=\"notice\">With this you are able to allow the \"contracts\" to have a valid connection to the internet <\/aside>",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "header": [],
                                    "code": 200,
                                    "body": "{ \"status\": true, \"message\": \"BABEL: Operaci\u00f3n realizada con \u00e9xito. Cliente\/s habilitado\/s\"}",
                                    "name": "success"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Unable to establish socket session, No route to host\"}",
                                    "name": "no route to host"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Undefined array key 'ip'\"}",
                                    "name": "no payload or missing params"
                                }
                            ]
                        },
                        {
                            "name": "Disable Connections",
                            "request": {
                                "url": {
                                    "host": "{{baseUrl}}",
                                    "path": "v1\/connection\/disableConnection",
                                    "query": [],
                                    "raw": "{{baseUrl}}\/v1\/connection\/disableConnection"
                                },
                                "method": "PATCH",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application\/xml"
                                    },
                                    {
                                        "key": "Accept",
                                        "value": "application\/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\"ip\":\"192.168.1.1\",\"clientes\":{\"cliente_ip\":\"1.1.1.1\"}}"
                                },
                                "description": "This endpoint gets the ip\/s in the address-list \"clientes_activos\", then it puts them in the \"clientes_cortados\" address-list\n<aside class=\"notice\">With this you are able to restrict the \"contracts\" to have a valid connection to the internet \ud83d\ude08<\/aside>",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "header": [],
                                    "code": 200,
                                    "body": "{ \"status\": true, \"message\": \"BABEL: Operaci\u00f3n realizada con \u00e9xito. Cliente\/s deshabilitado\/s\"}",
                                    "name": "success"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Unable to establish socket session, No route to host\"}",
                                    "name": "no route to host"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Undefined array key 'ip'\"}",
                                    "name": "no payload or missing params"
                                }
                            ]
                        },
                        {
                            "name": "PATCH v1\/connection\/revertChanges",
                            "request": {
                                "url": {
                                    "host": "{{baseUrl}}",
                                    "path": "v1\/connection\/revertChanges",
                                    "query": [],
                                    "raw": "{{baseUrl}}\/v1\/connection\/revertChanges"
                                },
                                "method": "PATCH",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application\/json"
                                    },
                                    {
                                        "key": "Accept",
                                        "value": "application\/json"
                                    }
                                ],
                                "body": null,
                                "description": "",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": []
                        },
                        {
                            "name": "Get Data Mikrotik",
                            "request": {
                                "url": {
                                    "host": "{{baseUrl}}",
                                    "path": "v1\/router\/getDataMikrotik",
                                    "query": [],
                                    "raw": "{{baseUrl}}\/v1\/router\/getDataMikrotik"
                                },
                                "method": "GET",
                                "header": [
                                    {
                                        "key": "Content-Type",
                                        "value": "application\/xml"
                                    },
                                    {
                                        "key": "Accept",
                                        "value": "application\/json"
                                    }
                                ],
                                "body": {
                                    "mode": "raw",
                                    "raw": "{\"ip\":\"192.168.1.1\",\"clientes\":{\"cliente_ip\":\"1.1.1.1\"}}"
                                },
                                "description": "This endpoint gets info from the router (clients connected, active clients, clipped, etc)\n<aside class=\"notice\">VERY USEFUL endpoint<\/aside>",
                                "auth": {
                                    "type": "noauth"
                                }
                            },
                            "response": [
                                {
                                    "header": [],
                                    "code": 200,
                                    "body": "{\n   \"name\": \"Mikrotik-Cristian\",\n   \"server_ip\": \"192.168.2.184\",\n   \"queues\": {\n       \"total_queues\": 1,\n       \"queues_details\": [\n       {\n           \"name\": \"1.1.1.1\",\n           \"target\": \"1.1.1.1\",\n           \"download\": \"102400 Kbps\",\n           \"upload\": \"3072 Kbps\"\n       }\n       ]\n   },\n   \"address_list\": {\n       \"total_address_list\": 1,\n       \"address_list_details\": [\n       {\n           \"client_ip\": \"1.1.1.1\",\n           \"address_list\": \"clientes_activos\"\n       }\n       ],\n       \"other_lists\": 0\n   },\n   \"firewall\": {\n       \"clientes_activos\": 1,\n       \"clientes_cortados\": 0\n   },\n   \"diferencias\": {\n       \"total_diferencias\": 0,\n       \"queues_sin_address\": 0,\n       \"addresses_sin_queue\": 0,\n       \"diferencias_detail\": 0\n   }}",
                                    "name": "success"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Unable to establish socket session, No route to host\"}",
                                    "name": "no route to host"
                                },
                                {
                                    "header": [],
                                    "code": 500,
                                    "body": "{\"message\": \"BABEL: Undefined array key 'ip'\"}",
                                    "name": "no payload or missing params"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "name": "Radius Controller",
            "description": "\nAPI for managing Radius Server",
            "item": [
                {
                    "name": "Get All Users",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "v1\/radius\/users_data",
                            "query": [],
                            "raw": "{{baseUrl}}\/v1\/radius\/users_data"
                        },
                        "method": "GET",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": null,
                        "description": "This endpoint allows you to get all users from the radius database"
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\"status\":\"success\",\"message\":\"Users found\",\"detail\":{\"id\":138421,\"name\":\"Kwargs\",\"username\":\"1.1.1.1\",\"password\":\"e08fsa13\",\"bandwith_plan\":\"11440k\/11440k\",\"main_ip\":\"1.1.1.1\",\"node\":\"ROSEDAL\",\"created_at\":\"2023-06-07\",\"updated_at\":\"2023-06-08\"}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\"status\": \"error\", \"message\": \"Error retrieving users\", \"detail\": \"SQLSTATE[HY000] [2002] No such file or directory\"}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Create User",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "v1\/radius\/users",
                            "query": [],
                            "raw": "{{baseUrl}}\/v1\/radius\/users"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"name\":\"Kwargs\",\"username\":\"1.1.1.1\",\"bandwith_plan\":\"11440k\\\/11440k\",\"node\":\"ROSEDAL\",\"main_ip\":\"1.1.1.1\"}"
                        },
                        "description": "This endpoint allows you to create a user in the radius database."
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 201,
                            "body": "{\"status\":\"success\",\"message\":\"User created successfully.\"}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 400,
                            "body": "{\"status\":\"error\",\"message\":\"Error creating user\",\"detail\":{\"main_ip\":[\"The main ip must be a valid IP address.\"]}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 409,
                            "body": "{\"status\":\"error\",\"message\":\"User already exists.\"}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\"status\": \"error\", \"message\": \"An error occurred while creating the user.\"}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Get User",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "v1\/radius\/users",
                            "query": [],
                            "raw": "{{baseUrl}}\/v1\/radius\/users"
                        },
                        "method": "GET",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"username\":\"1.1.1.1\"}"
                        },
                        "description": "This endpoint allows you to get a user from the radius database based on the username in the request"
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\"status\":\"success\",\"message\":\"User found\",\"detail\":{\"id\":138421,\"name\":\"Kwargs\",\"username\":\"1.1.1.1\",\"password\":\"e08fsa13\",\"bandwith_plan\":\"11440k\/11440k\",\"main_ip\":\"1.1.1.1\",\"node\":\"ROSEDAL\",\"created_at\":\"2023-06-07\",\"updated_at\":\"2023-06-08\"}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 400,
                            "body": "{\"status\":\"error\",\"message\":\"Error getting user\",\"detail\":{\"username\":[\"The username field is required.\"]}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 404,
                            "body": "{\"status\":\"error\",\"message\":\"User does not exist.\"}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\"status\": \"error\", \"message\": \"Error retrieving users\", \"detail\": \"SQLSTATE[HY000] [2002] No such file or directory\"}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Update User",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "v1\/radius\/users",
                            "query": [],
                            "raw": "{{baseUrl}}\/v1\/radius\/users"
                        },
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"name\":\"Kwargs\",\"username\":\"1.1.1.1\",\"bandwith_plan\":\"11440k\\\/11440k\",\"node\":\"ROSEDAL\",\"main_ip\":\"1.1.1.1\"}"
                        },
                        "description": "This endpoint allows you to update a user in the radius database."
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\"status\":\"success\",\"message\":\"Bandwidth updated successfully\",\"detail\":{\"status\":\"success\",\"message\":\"User found\",\"detail\":{\"id\":138463,\"name\":\"Kwargs\",\"username\":\"1.1.1.1\",\"password\":\"e086aa13\",\"bandwith_plan\":\"11440k\/11440k\",\"main_ip\":\"1.1.1.1\",\"node\":\"ROSEDAL\",\"created_at\":\"2023-06-08\",\"updated_at\":\"2023-06-08\"}}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 400,
                            "body": "{\"status\":\"error\",\"message\":\"Error updating user\",\"detail\":{\"main_ip\":[\"The main ip must be a valid IP address.\"]}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\"status\": \"error\", \"message\": \"An error occurred while updating the user.\"}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Delete User",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "v1\/radius\/users",
                            "query": [],
                            "raw": "{{baseUrl}}\/v1\/radius\/users"
                        },
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"username\":\"1.1.1.1\"}"
                        },
                        "description": "This endpoint allows you to delete a user in the radius database."
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\"status\":\"success\",\"message\":\"User deleted successfully\"}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 400,
                            "body": "{\"status\":\"error\",\"message\":\"Error deleting user\",\"detail\":{\"username\":[\"The username field is required.\"]}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 404,
                            "body": "{\"status\":\"error\",\"message\":\"User does not exist.\"}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\"status\": \"error\", \"message\": \"Error deleting user\", \"detail\": \"SQLSTATE[HY000] [2002] No such file or directory\"}",
                            "name": ""
                        }
                    ]
                }
            ]
        },
        {
            "name": "SmartOLT Controller",
            "description": "\nAPI for managing SmartOLT",
            "item": [
                {
                    "name": "Get ONU Status",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "v1\/smartolt\/onu\/status",
                            "query": [],
                            "raw": "{{baseUrl}}\/v1\/smartolt\/onu\/status"
                        },
                        "method": "GET",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"onu_sn\":\"HWTCA7A1236A\"}"
                        },
                        "description": "This endpoint allows you to get the status of an ONU."
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\"status\": \"success\", \"message\": \"ONU Status retrieved successfully.\", \"detail\": {\"status\": true,\"onu_status\": \"Online\"}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 400,
                            "body": "{\"status\": \"error\", \"message\": \"Invalid data.\", \"detail\": {\"onu_sn\": [\"The onu sn field is required.\"]}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 404,
                            "body": "{\"status\": \"error\", \"message\": \"ONU Status not found.\"}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\"status\": \"error\", \"message\": \"An error occurred while retrieving ONU Status.\"}",
                            "name": ""
                        }
                    ]
                },
                {
                    "name": "Reboot ONU",
                    "request": {
                        "url": {
                            "host": "{{baseUrl}}",
                            "path": "v1\/smartolt\/onu\/reboot",
                            "query": [],
                            "raw": "{{baseUrl}}\/v1\/smartolt\/onu\/reboot"
                        },
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application\/json"
                            },
                            {
                                "key": "Accept",
                                "value": "application\/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\"onu_sn\":\"HWTCA7A1236A\"}"
                        },
                        "description": "This endpoint allows you to reboot an ONU by its serial number."
                    },
                    "response": [
                        {
                            "header": [],
                            "code": 200,
                            "body": "{\"status\": \"success\", \"message\": \"ONU rebooted successfully.\", \"detail\": {\"status\": true,\"response\": \"Device reboot command sent\"}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 400,
                            "body": "{\"status\": \"error\", \"message\": \"Invalid data.\", \"detail\": {\"onu_sn\": [\"The onu sn field is required.\"]}}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 404,
                            "body": "{\"status\": \"error\", \"message\": \"ONU Status not found.\"}",
                            "name": ""
                        },
                        {
                            "header": [],
                            "code": 500,
                            "body": "{\"status\": \"error\", \"message\": \"An error occurred while retrieving ONU Status.\"}",
                            "name": ""
                        }
                    ]
                }
            ]
        }
    ],
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "key",
                "value": null,
                "type": "string"
            }
        ]
    }
}