openapi: 3.0.3
info:
  title: 'BABEL v1'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /v1/ftth/customer:
    get:
      summary: 'Get Customer Connection'
      operationId: getCustomerConnection
      description: 'This endpoint allows you to get the customer connection params from Radius and status from SmartOLT.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer BEARER_TOKEN'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: true
                  message: 'Customer connection found in Radius and ONU is available in SmartOLT.'
                  data:
                    radius:
                      status: success
                      message: 'User found'
                      detail:
                        id: 29881
                        name: 'Gustavo   Ivan   Escalon CastroESCALON CASTRO'
                        username: 10.112.239.132
                        password: password
                        bandwith_plan: 61440k/61440k
                        main_ip: 10.192.310.114
                        node: 'CASTROL FTTH'
                        created_at: '0000-00-00'
                        updated_at: '2023-06-08'
                    smartolt:
                      status: success
                      message: 'ONU Status retrieved successfully'
                      detail:
                        status: true
                        onu_status: Online
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Customer connection found in Radius and ONU is available in SmartOLT.'
                  data:
                    type: object
                    properties:
                      radius:
                        type: object
                        properties:
                          status:
                            type: string
                            example: success
                          message:
                            type: string
                            example: 'User found'
                          detail:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 29881
                              name:
                                type: string
                                example: 'Gustavo   Ivan   Escalon CastroESCALON CASTRO'
                              username:
                                type: string
                                example: 10.112.239.132
                              password:
                                type: string
                                example: password
                              bandwith_plan:
                                type: string
                                example: 61440k/61440k
                              main_ip:
                                type: string
                                example: 10.192.310.114
                              node:
                                type: string
                                example: 'CASTROL FTTH'
                              created_at:
                                type: string
                                example: '0000-00-00'
                              updated_at:
                                type: string
                                example: '2023-06-08'
                      smartolt:
                        type: object
                        properties:
                          status:
                            type: string
                            example: success
                          message:
                            type: string
                            example: 'ONU Status retrieved successfully'
                          detail:
                            type: object
                            properties:
                              status:
                                type: boolean
                                example: true
                              onu_status:
                                type: string
                                example: Online
        206:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Error getting ONU status, but customer connection was found in Radius.'
                  data:
                    radius:
                      status: success
                      message: 'User found'
                      detail:
                        id: 29881
                        name: 'Gustavo   Ivan   Escalon CastroESCALON CASTRO'
                        username: 10.112.239.232
                        password: b3afs82
                        bandwith_plan: 61440k/61440k
                        main_ip: 10.192.510.114
                        node: 'CASTROL FTTH'
                        created_at: '0000-00-00'
                        updated_at: '2023-06-08'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Error getting ONU status, but customer connection was found in Radius.'
                  data:
                    type: object
                    properties:
                      radius:
                        type: object
                        properties:
                          status:
                            type: string
                            example: success
                          message:
                            type: string
                            example: 'User found'
                          detail:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 29881
                              name:
                                type: string
                                example: 'Gustavo   Ivan   Escalon CastroESCALON CASTRO'
                              username:
                                type: string
                                example: 10.112.239.232
                              password:
                                type: string
                                example: b3afs82
                              bandwith_plan:
                                type: string
                                example: 61440k/61440k
                              main_ip:
                                type: string
                                example: 10.192.510.114
                              node:
                                type: string
                                example: 'CASTROL FTTH'
                              created_at:
                                type: string
                                example: '0000-00-00'
                              updated_at:
                                type: string
                                example: '2023-06-08'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Invalid data.'
                  detail:
                    username:
                      - 'The username field is required.'
                    onu_sn:
                      - 'The onu sn field is required.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Invalid data.'
                  detail:
                    type: object
                    properties:
                      username:
                        type: array
                        example:
                          - 'The username field is required.'
                        items:
                          type: string
                      onu_sn:
                        type: array
                        example:
                          - 'The onu sn field is required.'
                        items:
                          type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error getting customer connection. Customer not found in Radius.'
                  data:
                    radius:
                      status: error
                      message: 'User does not exist.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error getting customer connection. Customer not found in Radius.'
                  data:
                    type: object
                    properties:
                      radius:
                        type: object
                        properties:
                          status:
                            type: string
                            example: error
                          message:
                            type: string
                            example: 'User does not exist.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error getting customer connection.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error getting customer connection.'
      tags:
        - 'FTTH Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'The username in radius'
                  example: 10.132.139.232
                onu_sn:
                  type: string
                  description: 'The ONU serial number'
                  example: HWTC31E0CJSD
              required:
                - username
                - onu_sn
    put:
      summary: 'Update Customer Connection'
      operationId: updateCustomerConnection
      description: 'This endpoint allows you to update the customer connection params in Radius and reboot the ONU via SmartOLT.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer BEARER_TOKEN'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: true
                  message: 'Customer connection updated in Radius and ONU rebooted in SmartOLT.'
                  data:
                    radius:
                      status: success
                      message: 'Bandwidth updated successfully'
                      detail:
                        status: success
                        message: 'User found'
                        detail:
                          id: 29881
                          name: Kwargs
                          username: 10.112.239.232
                          password: b3a7fw82
                          bandwith_plan: 61440k/61440k
                          main_ip: 10.192.210.114
                          node: 'CASTROL FTTH'
                          created_at: '0000-00-00'
                          updated_at: '2023-06-08'
                    smartolt:
                      status: success
                      message: 'ONU Status rebooted successfully'
                      detail:
                        status: true
                        response: 'Device reboot command sent'
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Customer connection updated in Radius and ONU rebooted in SmartOLT.'
                  data:
                    type: object
                    properties:
                      radius:
                        type: object
                        properties:
                          status:
                            type: string
                            example: success
                          message:
                            type: string
                            example: 'Bandwidth updated successfully'
                          detail:
                            type: object
                            properties:
                              status:
                                type: string
                                example: success
                              message:
                                type: string
                                example: 'User found'
                              detail:
                                type: object
                                properties:
                                  id:
                                    type: integer
                                    example: 29881
                                  name:
                                    type: string
                                    example: Kwargs
                                  username:
                                    type: string
                                    example: 10.112.239.232
                                  password:
                                    type: string
                                    example: b3a7fw82
                                  bandwith_plan:
                                    type: string
                                    example: 61440k/61440k
                                  main_ip:
                                    type: string
                                    example: 10.192.210.114
                                  node:
                                    type: string
                                    example: 'CASTROL FTTH'
                                  created_at:
                                    type: string
                                    example: '0000-00-00'
                                  updated_at:
                                    type: string
                                    example: '2023-06-08'
                      smartolt:
                        type: object
                        properties:
                          status:
                            type: string
                            example: success
                          message:
                            type: string
                            example: 'ONU Status rebooted successfully'
                          detail:
                            type: object
                            properties:
                              status:
                                type: boolean
                                example: true
                              response:
                                type: string
                                example: 'Device reboot command sent'
        206:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Customer connection updated in Radius, but ONU is not available in SmartOLT.'
                  data:
                    radius:
                      status: success
                      message: 'User found'
                      detail:
                        id: 29881
                        name: Kwargs
                        username: 10.112.239.232
                        password: b3afswe82
                        bandwith_plan: 61440k/61440k
                        main_ip: 10.192.510.114
                        node: 'CASTROL FTTH'
                        created_at: '0000-00-00'
                        updated_at: '2023-06-08'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Customer connection updated in Radius, but ONU is not available in SmartOLT.'
                  data:
                    type: object
                    properties:
                      radius:
                        type: object
                        properties:
                          status:
                            type: string
                            example: success
                          message:
                            type: string
                            example: 'User found'
                          detail:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 29881
                              name:
                                type: string
                                example: Kwargs
                              username:
                                type: string
                                example: 10.112.239.232
                              password:
                                type: string
                                example: b3afswe82
                              bandwith_plan:
                                type: string
                                example: 61440k/61440k
                              main_ip:
                                type: string
                                example: 10.192.510.114
                              node:
                                type: string
                                example: 'CASTROL FTTH'
                              created_at:
                                type: string
                                example: '0000-00-00'
                              updated_at:
                                type: string
                                example: '2023-06-08'
        422:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error updating customer connection.'
                  data:
                    radius:
                      status: error
                      message: 'User does not exist.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error updating customer connection.'
                  data:
                    type: object
                    properties:
                      radius:
                        type: object
                        properties:
                          status:
                            type: string
                            example: error
                          message:
                            type: string
                            example: 'User does not exist.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error getting customer connection.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error getting customer connection.'
      tags:
        - 'FTTH Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The customer name.'
                  example: Kwargs
                username:
                  type: string
                  description: 'The username in radius.'
                  example: 1.1.1.1
                bandwith_plan:
                  type: string
                  description: 'The bandwidth plan.'
                  example: 61440k/61440k
                node:
                  type: string
                  description: 'The node.'
                  example: 'CASTROL FTTH'
                main_ip:
                  type: string
                  description: 'The main IP.'
                  example: 10.192.310.11
                onu_sn:
                  type: string
                  description: 'The ONU serial number.'
                  example: HWTC31E0CJSF
              required:
                - name
                - username
                - bandwith_plan
                - node
                - main_ip
                - onu_sn
  /v1/test:
    get:
      summary: 'Test RouterOS'
      operationId: testRouterOS
      description: "This endpoint allows you to test the Mikrotik server connection with this API.\nIt's a really useful endpoint and a start point to know if there is any problem.\n<aside class=\"notice\">I recommend you to use first, to debug any futher inconvenience. 😁</aside>"
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  name: Mikrotik-Cristian
                properties:
                  name:
                    type: string
                    example: Mikrotik-Cristian
        500:
          description: 'no payload or body params'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "BABEL: Undefined array key 'ip'"
                properties:
                  message:
                    type: string
                    example: "BABEL: Undefined array key 'ip'"
      tags:
        - 'Mikrotik Controller'
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: object
              properties:
                ip:
                  type: string
                  description: 'The server ip.'
                  example: 192.168.1.1
              required:
                - ip
      security: []
  /v1/contracts:
    get:
      summary: 'Get Contracts'
      operationId: getContracts
      description: "This endpoint allows you to get contracts information from a Mikrotik server.\n<aside class=\"notice\">This will be useful to get the clients that are in an specific router. </aside>"
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  ip_server: 192.168.2.184
                  clientes_activos: 1
                  clientes_details:
                    -
                      cliente_ip: 1.1.1.1
                      download: '102400 Kbps'
                      upload: '3072 Kbps'
                      estado: activo
                properties:
                  ip_server:
                    type: string
                    example: 192.168.2.184
                  clientes_activos:
                    type: integer
                    example: 1
                  clientes_details:
                    type: array
                    example:
                      -
                        cliente_ip: 1.1.1.1
                        download: '102400 Kbps'
                        upload: '3072 Kbps'
                        estado: activo
                    items:
                      type: object
                      properties:
                        cliente_ip:
                          type: string
                          example: 1.1.1.1
                        download:
                          type: string
                          example: '102400 Kbps'
                        upload:
                          type: string
                          example: '3072 Kbps'
                        estado:
                          type: string
                          example: activo
        500:
          description: 'no payload or body params'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "BABEL: Undefined array key 'ip'"
                properties:
                  message:
                    type: string
                    example: "BABEL: Undefined array key 'ip'"
      tags:
        - 'Mikrotik Controller'
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: object
              properties:
                ip:
                  type: string
                  description: 'The server ip.'
                  example: 192.168.1.1
              required:
                - ip
      security: []
    post:
      summary: 'Create Contracts'
      operationId: createContracts
      description: "This endpoint allows you to create a 'contract or contracts' in a Mikrotik server.\n<aside class=\"notice\">With this you are able to create \"contracts\" (queues with address-list). </aside>"
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'BABEL : ¡Cola/s creada/s con éxito!'
                properties:
                  message:
                    type: string
                    example: 'BABEL : ¡Cola/s creada/s con éxito!'
        500:
          description: 'no payload or missing params'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "BABEL: Undefined array key 'ip'"
                properties:
                  message:
                    type: string
                    example: "BABEL: Undefined array key 'ip'"
      tags:
        - 'Mikrotik Controller'
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: object
              properties:
                ip:
                  type: string
                  description: 'The server ip.'
                  example: 192.168.1.1
                clientes:
                  type: object
                  description: 'A list of objects that contains the clients params.'
                  example: []
                  properties:
                    cliente_ip:
                      type: string
                      description: 'Client IP.'
                      example: 1.1.1.1
                    download:
                      type: string
                      description: 'Client download speed.'
                      example: '102400 Kbps'
                    upload:
                      type: string
                      description: 'Client upload speed.'
                      example: '3072 Kbps'
                    estado:
                      type: string
                      description: 'Client status account.'
                      example: activo
              required:
                - ip
                - clientes
      security: []
    put:
      summary: 'Update Contracts'
      operationId: updateContracts
      description: "This endpoint allows you to update the banwidth profile of a 'contract or contracts' or ip in a Mikrotik server.\n<aside class=\"notice\">With this you are able to update the \"contracts\" (queues with address-list). </aside>"
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'BABEL : ¡Cola/s actualizada/s con éxito!'
                properties:
                  message:
                    type: string
                    example: 'BABEL : ¡Cola/s actualizada/s con éxito!'
        500:
          description: 'no payload or missing params'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "BABEL: Undefined array key 'ip'"
                properties:
                  message:
                    type: string
                    example: "BABEL: Undefined array key 'ip'"
      tags:
        - 'Mikrotik Controller'
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: object
              properties:
                ip:
                  type: string
                  description: 'The server ip.'
                  example: 192.168.1.1
                clientes:
                  type: object
                  description: 'A list of objects that contains the clients params.'
                  example: []
                  properties:
                    cliente_ip:
                      type: string
                      description: 'Client IP.'
                      example: 1.1.1.1
                    download:
                      type: string
                      description: 'Client download speed.'
                      example: '102400 Kbps'
                    upload:
                      type: string
                      description: 'Client upload speed.'
                      example: '3072 Kbps'
                    estado:
                      type: string
                      description: 'Client status account.'
                      example: activo
              required:
                - ip
                - clientes
      security: []
    delete:
      summary: 'Delete Contracts'
      operationId: deleteContracts
      description: "This endpoint allows you to delete a 'contract or contracts' in a Mikrotik server.\n<aside class=\"notice\">With this you are able to delete the \"contracts\" (queues with address-list). BE CAREFUL 👀 . </aside>"
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'BABEL : ¡Cola/s eliminada/s con éxito!'
                properties:
                  message:
                    type: string
                    example: 'BABEL : ¡Cola/s eliminada/s con éxito!'
        500:
          description: 'no payload or missing params'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "BABEL: Undefined array key 'ip'"
                properties:
                  message:
                    type: string
                    example: "BABEL: Undefined array key 'ip'"
      tags:
        - 'Mikrotik Controller'
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: object
              properties:
                ip:
                  type: string
                  description: 'The server ip.'
                  example: 192.168.1.1
                clientes:
                  type: object
                  description: 'A list of objects that contains the clients params.'
                  example: []
                  properties:
                    cliente_ip:
                      type: string
                      description: 'Client IP.'
                      example: 1.1.1.1
                    download:
                      type: string
                      description: 'Client download speed.'
                      example: '102400 Kbps'
                    upload:
                      type: string
                      description: 'Client upload speed.'
                      example: '3072 Kbps'
                    estado:
                      type: string
                      description: 'Client status account.'
                      example: activo
              required:
                - ip
                - clientes
      security: []
  /v1.1/contracts:
    post:
      summary: 'Create Contracts'
      operationId: createContracts
      description: "This endpoint allows you to create a 'contract or contracts' in a Mikrotik server.\n<aside class=\"notice\">With this you are able to create \"contracts\" (queues with address-list). </aside>"
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'BABEL : ¡Cola/s creada/s con éxito!'
                properties:
                  message:
                    type: string
                    example: 'BABEL : ¡Cola/s creada/s con éxito!'
        500:
          description: 'no payload or missing params'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "BABEL: Undefined array key 'ip'"
                properties:
                  message:
                    type: string
                    example: "BABEL: Undefined array key 'ip'"
      tags:
        - 'Mikrotik Controller'
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: object
              properties:
                ip:
                  type: string
                  description: 'The server ip.'
                  example: 192.168.1.1
                clientes:
                  type: object
                  description: 'A list of objects that contains the clients params.'
                  example: []
                  properties:
                    cliente_ip:
                      type: string
                      description: 'Client IP.'
                      example: 1.1.1.1
                    download:
                      type: string
                      description: 'Client download speed.'
                      example: '102400 Kbps'
                    upload:
                      type: string
                      description: 'Client upload speed.'
                      example: '3072 Kbps'
                    estado:
                      type: string
                      description: 'Client status account.'
                      example: activo
              required:
                - ip
                - clientes
      security: []
    put:
      summary: 'Update Contracts'
      operationId: updateContracts
      description: "This endpoint allows you to update the banwidth profile of a 'contract or contracts' or ip in a Mikrotik server.\n<aside class=\"notice\">With this you are able to update the \"contracts\" (queues with address-list). </aside>"
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'BABEL : ¡Cola/s actualizada/s con éxito!'
                properties:
                  message:
                    type: string
                    example: 'BABEL : ¡Cola/s actualizada/s con éxito!'
        500:
          description: 'no payload or missing params'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "BABEL: Undefined array key 'ip'"
                properties:
                  message:
                    type: string
                    example: "BABEL: Undefined array key 'ip'"
      tags:
        - 'Mikrotik Controller'
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: object
              properties:
                ip:
                  type: string
                  description: 'The server ip.'
                  example: 192.168.1.1
                clientes:
                  type: object
                  description: 'A list of objects that contains the clients params.'
                  example: []
                  properties:
                    cliente_ip:
                      type: string
                      description: 'Client IP.'
                      example: 1.1.1.1
                    download:
                      type: string
                      description: 'Client download speed.'
                      example: '102400 Kbps'
                    upload:
                      type: string
                      description: 'Client upload speed.'
                      example: '3072 Kbps'
                    estado:
                      type: string
                      description: 'Client status account.'
                      example: activo
              required:
                - ip
                - clientes
      security: []
  /v1/connection/enableConnection:
    patch:
      summary: 'Enable Connections'
      operationId: enableConnections
      description: "This endpoint gets the ip/s in the address-list \"clientes_cortados\", then it puts it/them back in \"clientes_activos\" address-list\n<aside class=\"notice\">With this you are able to allow the \"contracts\" to have a valid connection to the internet </aside>"
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: true
                  message: 'BABEL: Operación realizada con éxito. Cliente/s habilitado/s'
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'BABEL: Operación realizada con éxito. Cliente/s habilitado/s'
        500:
          description: 'no payload or missing params'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "BABEL: Undefined array key 'ip'"
                properties:
                  message:
                    type: string
                    example: "BABEL: Undefined array key 'ip'"
      tags:
        - 'Mikrotik Controller'
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: object
              properties:
                ip:
                  type: string
                  description: 'The server ip.'
                  example: 192.168.1.1
                clientes:
                  type: object
                  description: 'A list of objects that contains the clients params.'
                  example: []
                  properties:
                    cliente_ip:
                      type: string
                      description: 'Client IP.'
                      example: 1.1.1.1
              required:
                - ip
                - clientes
      security: []
  /v1/connection/disableConnection:
    patch:
      summary: 'Disable Connections'
      operationId: disableConnections
      description: "This endpoint gets the ip/s in the address-list \"clientes_activos\", then it puts them in the \"clientes_cortados\" address-list\n<aside class=\"notice\">With this you are able to restrict the \"contracts\" to have a valid connection to the internet 😈</aside>"
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: true
                  message: 'BABEL: Operación realizada con éxito. Cliente/s deshabilitado/s'
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'BABEL: Operación realizada con éxito. Cliente/s deshabilitado/s'
        500:
          description: 'no payload or missing params'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "BABEL: Undefined array key 'ip'"
                properties:
                  message:
                    type: string
                    example: "BABEL: Undefined array key 'ip'"
      tags:
        - 'Mikrotik Controller'
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: object
              properties:
                ip:
                  type: string
                  description: 'The server ip.'
                  example: 192.168.1.1
                clientes:
                  type: object
                  description: 'A list of objects that contains the clients params.'
                  example: []
                  properties:
                    cliente_ip:
                      type: string
                      description: 'Client IP.'
                      example: 1.1.1.1
              required:
                - ip
                - clientes
      security: []
  /v1/connection/revertChanges:
    patch:
      summary: ''
      operationId: patchV1ConnectionRevertChanges
      description: ''
      parameters: []
      responses: {  }
      tags:
        - 'Mikrotik Controller'
      security: []
  /v1/router/getDataMikrotik:
    get:
      summary: 'Get Data Mikrotik'
      operationId: getDataMikrotik
      description: "This endpoint gets info from the router (clients connected, active clients, clipped, etc)\n<aside class=\"notice\">VERY USEFUL endpoint</aside>"
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  name: Mikrotik-Cristian
                  server_ip: 192.168.2.184
                  queues:
                    total_queues: 1
                    queues_details:
                      -
                        name: 1.1.1.1
                        target: 1.1.1.1
                        download: '102400 Kbps'
                        upload: '3072 Kbps'
                  address_list:
                    total_address_list: 1
                    address_list_details:
                      -
                        client_ip: 1.1.1.1
                        address_list: clientes_activos
                    other_lists: 0
                  firewall:
                    clientes_activos: 1
                    clientes_cortados: 0
                  diferencias:
                    total_diferencias: 0
                    queues_sin_address: 0
                    addresses_sin_queue: 0
                    diferencias_detail: 0
                properties:
                  name:
                    type: string
                    example: Mikrotik-Cristian
                  server_ip:
                    type: string
                    example: 192.168.2.184
                  queues:
                    type: object
                    properties:
                      total_queues:
                        type: integer
                        example: 1
                      queues_details:
                        type: array
                        example:
                          -
                            name: 1.1.1.1
                            target: 1.1.1.1
                            download: '102400 Kbps'
                            upload: '3072 Kbps'
                        items:
                          type: object
                          properties:
                            name:
                              type: string
                              example: 1.1.1.1
                            target:
                              type: string
                              example: 1.1.1.1
                            download:
                              type: string
                              example: '102400 Kbps'
                            upload:
                              type: string
                              example: '3072 Kbps'
                  address_list:
                    type: object
                    properties:
                      total_address_list:
                        type: integer
                        example: 1
                      address_list_details:
                        type: array
                        example:
                          -
                            client_ip: 1.1.1.1
                            address_list: clientes_activos
                        items:
                          type: object
                          properties:
                            client_ip:
                              type: string
                              example: 1.1.1.1
                            address_list:
                              type: string
                              example: clientes_activos
                      other_lists:
                        type: integer
                        example: 0
                  firewall:
                    type: object
                    properties:
                      clientes_activos:
                        type: integer
                        example: 1
                      clientes_cortados:
                        type: integer
                        example: 0
                  diferencias:
                    type: object
                    properties:
                      total_diferencias:
                        type: integer
                        example: 0
                      queues_sin_address:
                        type: integer
                        example: 0
                      addresses_sin_queue:
                        type: integer
                        example: 0
                      diferencias_detail:
                        type: integer
                        example: 0
        500:
          description: 'no payload or missing params'
          content:
            application/json:
              schema:
                type: object
                example:
                  message: "BABEL: Undefined array key 'ip'"
                properties:
                  message:
                    type: string
                    example: "BABEL: Undefined array key 'ip'"
      tags:
        - 'Mikrotik Controller'
      requestBody:
        required: true
        content:
          application/xml:
            schema:
              type: object
              properties:
                ip:
                  type: string
                  description: 'The server ip.'
                  example: 192.168.1.1
                clientes:
                  type: object
                  description: 'A list of objects that contains the clients params.'
                  example: []
                  properties:
                    cliente_ip:
                      type: string
                      description: 'Client IP.'
                      example: 1.1.1.1
              required:
                - ip
                - clientes
      security: []
  /v1/radius/users_data:
    get:
      summary: 'Get All Users'
      operationId: getAllUsers
      description: 'This endpoint allows you to get all users from the radius database'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer BEARER_TOKEN'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Users found'
                  detail:
                    id: 138421
                    name: Kwargs
                    username: 1.1.1.1
                    password: e08fsa13
                    bandwith_plan: 11440k/11440k
                    main_ip: 1.1.1.1
                    node: ROSEDAL
                    created_at: '2023-06-07'
                    updated_at: '2023-06-08'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Users found'
                  detail:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 138421
                      name:
                        type: string
                        example: Kwargs
                      username:
                        type: string
                        example: 1.1.1.1
                      password:
                        type: string
                        example: e08fsa13
                      bandwith_plan:
                        type: string
                        example: 11440k/11440k
                      main_ip:
                        type: string
                        example: 1.1.1.1
                      node:
                        type: string
                        example: ROSEDAL
                      created_at:
                        type: string
                        example: '2023-06-07'
                      updated_at:
                        type: string
                        example: '2023-06-08'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error retrieving users'
                  detail: 'SQLSTATE[HY000] [2002] No such file or directory'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error retrieving users'
                  detail:
                    type: string
                    example: 'SQLSTATE[HY000] [2002] No such file or directory'
      tags:
        - 'Radius Controller'
  /v1/radius/users:
    post:
      summary: 'Create User'
      operationId: createUser
      description: 'This endpoint allows you to create a user in the radius database.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer BEARER_TOKEN'
          schema:
            type: string
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'User created successfully.'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'User created successfully.'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error creating user'
                  detail:
                    main_ip:
                      - 'The main ip must be a valid IP address.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error creating user'
                  detail:
                    type: object
                    properties:
                      main_ip:
                        type: array
                        example:
                          - 'The main ip must be a valid IP address.'
                        items:
                          type: string
        409:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'User already exists.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'User already exists.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'An error occurred while creating the user.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'An error occurred while creating the user.'
      tags:
        - 'Radius Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user.'
                  example: Kwargs
                username:
                  type: string
                  description: 'The username of the user.'
                  example: 1.1.1.1
                bandwith_plan:
                  type: string
                  description: 'The bandwith plan of the user.'
                  example: 11440k/11440k
                node:
                  type: string
                  description: 'The node of the user.'
                  example: ROSEDAL
                main_ip:
                  type: string
                  description: 'The main ip of the user.'
                  example: 1.1.1.1
              required:
                - name
                - username
                - bandwith_plan
                - node
                - main_ip
    get:
      summary: 'Get User'
      operationId: getUser
      description: 'This endpoint allows you to get a user from the radius database based on the username in the request'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer BEARER_TOKEN'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'User found'
                  detail:
                    id: 138421
                    name: Kwargs
                    username: 1.1.1.1
                    password: e08fsa13
                    bandwith_plan: 11440k/11440k
                    main_ip: 1.1.1.1
                    node: ROSEDAL
                    created_at: '2023-06-07'
                    updated_at: '2023-06-08'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'User found'
                  detail:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 138421
                      name:
                        type: string
                        example: Kwargs
                      username:
                        type: string
                        example: 1.1.1.1
                      password:
                        type: string
                        example: e08fsa13
                      bandwith_plan:
                        type: string
                        example: 11440k/11440k
                      main_ip:
                        type: string
                        example: 1.1.1.1
                      node:
                        type: string
                        example: ROSEDAL
                      created_at:
                        type: string
                        example: '2023-06-07'
                      updated_at:
                        type: string
                        example: '2023-06-08'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error getting user'
                  detail:
                    username:
                      - 'The username field is required.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error getting user'
                  detail:
                    type: object
                    properties:
                      username:
                        type: array
                        example:
                          - 'The username field is required.'
                        items:
                          type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'User does not exist.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'User does not exist.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error retrieving users'
                  detail: 'SQLSTATE[HY000] [2002] No such file or directory'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error retrieving users'
                  detail:
                    type: string
                    example: 'SQLSTATE[HY000] [2002] No such file or directory'
      tags:
        - 'Radius Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'The username of the user.'
                  example: 1.1.1.1
              required:
                - username
    put:
      summary: 'Update User'
      operationId: updateUser
      description: 'This endpoint allows you to update a user in the radius database.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer BEARER_TOKEN'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Bandwidth updated successfully'
                  detail:
                    status: success
                    message: 'User found'
                    detail:
                      id: 138463
                      name: Kwargs
                      username: 1.1.1.1
                      password: e086aa13
                      bandwith_plan: 11440k/11440k
                      main_ip: 1.1.1.1
                      node: ROSEDAL
                      created_at: '2023-06-08'
                      updated_at: '2023-06-08'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Bandwidth updated successfully'
                  detail:
                    type: object
                    properties:
                      status:
                        type: string
                        example: success
                      message:
                        type: string
                        example: 'User found'
                      detail:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 138463
                          name:
                            type: string
                            example: Kwargs
                          username:
                            type: string
                            example: 1.1.1.1
                          password:
                            type: string
                            example: e086aa13
                          bandwith_plan:
                            type: string
                            example: 11440k/11440k
                          main_ip:
                            type: string
                            example: 1.1.1.1
                          node:
                            type: string
                            example: ROSEDAL
                          created_at:
                            type: string
                            example: '2023-06-08'
                          updated_at:
                            type: string
                            example: '2023-06-08'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error updating user'
                  detail:
                    main_ip:
                      - 'The main ip must be a valid IP address.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error updating user'
                  detail:
                    type: object
                    properties:
                      main_ip:
                        type: array
                        example:
                          - 'The main ip must be a valid IP address.'
                        items:
                          type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'An error occurred while updating the user.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'An error occurred while updating the user.'
      tags:
        - 'Radius Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'The name of the user.'
                  example: Kwargs
                username:
                  type: string
                  description: 'The username of the user.'
                  example: 1.1.1.1
                bandwith_plan:
                  type: string
                  description: 'The bandwith plan of the user.'
                  example: 11440k/11440k
                node:
                  type: string
                  description: 'The node of the user.'
                  example: ROSEDAL
                main_ip:
                  type: string
                  description: 'The main ip of the user.'
                  example: 1.1.1.1
              required:
                - name
                - username
                - bandwith_plan
                - node
                - main_ip
    delete:
      summary: 'Delete User'
      operationId: deleteUser
      description: 'This endpoint allows you to delete a user in the radius database.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer BEARER_TOKEN'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'User deleted successfully'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'User deleted successfully'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error deleting user'
                  detail:
                    username:
                      - 'The username field is required.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error deleting user'
                  detail:
                    type: object
                    properties:
                      username:
                        type: array
                        example:
                          - 'The username field is required.'
                        items:
                          type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'User does not exist.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'User does not exist.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Error deleting user'
                  detail: 'SQLSTATE[HY000] [2002] No such file or directory'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Error deleting user'
                  detail:
                    type: string
                    example: 'SQLSTATE[HY000] [2002] No such file or directory'
      tags:
        - 'Radius Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'The username of the user.'
                  example: 1.1.1.1
              required:
                - username
  /v1/smartolt/onu/status:
    get:
      summary: 'Get ONU Status'
      operationId: getONUStatus
      description: 'This endpoint allows you to get the status of an ONU.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer BEARER_TOKEN'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'ONU Status retrieved successfully.'
                  detail:
                    status: true
                    onu_status: Online
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'ONU Status retrieved successfully.'
                  detail:
                    type: object
                    properties:
                      status:
                        type: boolean
                        example: true
                      onu_status:
                        type: string
                        example: Online
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Invalid data.'
                  detail:
                    onu_sn:
                      - 'The onu sn field is required.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Invalid data.'
                  detail:
                    type: object
                    properties:
                      onu_sn:
                        type: array
                        example:
                          - 'The onu sn field is required.'
                        items:
                          type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'ONU Status not found.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'ONU Status not found.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'An error occurred while retrieving ONU Status.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'An error occurred while retrieving ONU Status.'
      tags:
        - 'SmartOLT Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                onu_sn:
                  type: string
                  description: 'The ONU serial number.'
                  example: HWTCA7A1236A
              required:
                - onu_sn
  /v1/smartolt/onu/reboot:
    post:
      summary: 'Reboot ONU'
      operationId: rebootONU
      description: 'This endpoint allows you to reboot an ONU by its serial number.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer BEARER_TOKEN'
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'ONU rebooted successfully.'
                  detail:
                    status: true
                    response: 'Device reboot command sent'
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'ONU rebooted successfully.'
                  detail:
                    type: object
                    properties:
                      status:
                        type: boolean
                        example: true
                      response:
                        type: string
                        example: 'Device reboot command sent'
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Invalid data.'
                  detail:
                    onu_sn:
                      - 'The onu sn field is required.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Invalid data.'
                  detail:
                    type: object
                    properties:
                      onu_sn:
                        type: array
                        example:
                          - 'The onu sn field is required.'
                        items:
                          type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'ONU Status not found.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'ONU Status not found.'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'An error occurred while retrieving ONU Status.'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'An error occurred while retrieving ONU Status.'
      tags:
        - 'SmartOLT Controller'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                onu_sn:
                  type: string
                  description: 'The ONU serial number.'
                  example: HWTCA7A1236A
              required:
                - onu_sn
tags:
  -
    name: 'FTTH Controller'
    description: "\nAPI for managing FTTH connections."
  -
    name: 'Mikrotik Controller'
    description: 'API for managing Mikrotik'
  -
    name: 'Radius Controller'
    description: "\nAPI for managing Radius Server"
  -
    name: 'SmartOLT Controller'
    description: "\nAPI for managing SmartOLT"
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
